<div x-data="{addressForm : false}" class="max-w-6xl mx-auto px-4 py-12">
    <div class="flex flex-col md:flex-row items-center justify-between my-5 gap-4">
        <h1 class="text-2xl font-bold text-gray-700">Addresses</h1>

        <button x-on:click="addressForm = true" type="button" class="text-white font-medium bg-gray-700 hover:bg-gray-900 px-6 py-2 cursor-pointer">
            Create new address
        </button>

        <a href="{{ routes.account_url }}" class="text-gray-600 hover:text-gray-800 font-medium underline">back to account</a>
    </div>

    {% render 'address-form', show_var: "addressForm", formTitle: "New Address", edit_address:customer.new_address %}
    
    <div>
        {% paginate customer.addresses by 10 %}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 lg:gap-12 p-4 md:p-12">
                {% for address in customer.addresses %}
                    <div x-data="{address_{{ address.id }}: false}">
                        <div class="relative flex flex-col text-center border p-2 h-80">
                            {% if address == customer.default_address %}
                                <span class="text-sm font-medium text-white bg-green-700 px-4 py-2">Default</span>
                            {% endif %}

                            <div class="my-8 h-full">{{ address | format_address }}</div>
                            <div class="flex flex-row gap-2">
                                <button x-on:click="address_{{ address.id }} = true" class="cursor-pointer w-full text-xs text-white bg-gray-700 hover:bg-gray-900 font-medium py-2">Edit</button>
                                <button class="w-full text-xs cursor-pointer font-medium text-gray-700 border py-2">Delete</button>
                            </div>
                        </div>
                        {% assign temp = 'address_' | append: address.id | escape %}
                        {% render 'address-form', show_var: temp, formTitle: "Edit Address", edit_address:address  %}
                    </div>
                {% endfor %}
            </div>
        {% endpaginate %}
    </div>
</div>



<script>
    class CustomerAddress{
        constructor(){
            this.initCustomerAddress();
            this.customerAddressesSelector();
        }

        initCustomerAddress(){
            const allAddressesSelector = document.querySelectorAll('select[data-country-selector]');
            if (allAddressesSelector.length < 1) return;
            
            allAddressesSelector.forEach(select => {
                let selectedCountry = this.getSelectedCountry(select); 
                
                if (!selectedCountry) return;

                let provinces = selectedCountry.dataset.provinces;
                let arrayOfProvince = JSON.parse(provinces);
                let provinceSelector = document.querySelector(`#address_province_${select.dataset.id}`);
                
                // if there is a country with no provinces so we disabled the province selector.
                if (arrayOfProvince.length < 1) {
                    provinceSelector.setAttribute('disabled', 'disabled');
                }else{
                    provinceSelector.removeAttribute('disabled');
                }

                provinceSelector.innerHTML = "";
                let options = '';
                // generate or creating the options of provinces.
                for(let index = 0;index < arrayOfProvince.length; index++){
                    if(arrayOfProvince[index][0] === provinceSelector.getAttribute('value')){
                        options += `<option value="${arrayOfProvince[index][0]}" selected>${arrayOfProvince[index][0]}</option>`;
                        
                    }else{
                        options += `<option value="${arrayOfProvince[index][0]}">${arrayOfProvince[index][0]}</option>`;
                    }
                }

                provinceSelector.innerHTML = options;
            });
        }

        getSelectedCountry(select){
            let option, selectedOption;
            for(let index = 0; index < select.options.length; index++){
                option = select.options[index];

                if (option.value === select.getAttribute('value')){
                    {% comment %} selectedOption = option;

                    selectedOption.setAttribute('selected', 'selected');
                    break; {% endcomment %}

                    option.setAttribute('selected', 'selected');
                    return option;
                }
            }

            {% comment %} return selectedOption; {% endcomment %}
        }

        customerAddressesSelector(){
            const addressesSelector = document.querySelectorAll("select[data-country-selector]");

            if (addressesSelector.length < 1) return;

            addressesSelector.forEach(select => {
                select.addEventListener('change', function(e){
                    let provinces = this.options[this.selectedIndex].dataset.provinces;

                    let arrayOfProvince = JSON.parse(provinces);
                    
                    let provinceSelector = document.querySelector(`#address_province_${this.dataset.id}`);
                
                    if (arrayOfProvince.length < 1) {
                        provinceSelector.setAttribute('disabled', 'disabled');
                    }else{
                        provinceSelector.removeAttribute('disabled');
                    }

                    provinceSelector.innerHTML = "";
                    let options = '';
                    for(let index = 0;index < arrayOfProvince.length; index++){
                        options += `<option value="${arrayOfProvince[index][0]}">${arrayOfProvince[index][0]}</option>`; 
                    }
    
                    provinceSelector.innerHTML = options;

                });
            });
        }
    }

    const customerAddress = new CustomerAddress();

    function updateCountryAndProvincesData(){
        console.log('sl;dkf;')
    }

    updateCountryAndProvincesData();
</script>